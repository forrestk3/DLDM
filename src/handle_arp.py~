from ryu.base import app_manager
from ryu.ofproto import ofproto_v1_3
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER,CONFIG_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib import hub
from ryu.topology.api import get_all_host, get_all_link, get_all_switch
from ryu.lib.packet import arp
from ryu.lib.packet import icmp
from ryu.lib.packet import ether_types
from ryu.lib import mac
from ryu.topology.api import get_switch, get_link
from ryu.app.wsgi import ControllerBase
from ryu.topology import event, switches
import networkx as nx

class NetworkAwareness(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    def __init__(self, *args, **kwargs):
        super(NetworkAwareness, self).__init__(*args, **kwargs)
        self.mac_table = {}
        self.arp_table = {}
        self.topo_thread = hub.spawn(self._get_topology)
        self.graph = nx.DiGraph()
        self.topology_api_app = self
        self.switch_host_port = {}        
        self.datapath_switch = {}

    def _get_topology(self):
        hub.sleep(2)
        switch_list=get_switch(self.topology_api_app,None)
        switches = [switch.dp.id for switch in switch_list]
        self.graph.add_nodes_from(switches)

        link_list = get_link(self.topology_api_app,None)
        for link in link_list:
            self.graph.add_edge()
